#define _CRT_SECURE_NO_WARNINGS 1
#include<iostream>
#include<assert.h>
using namespace std;
class Date
{
public:
	Date(int year = 1900, int month = 1, int day = 1)
		:_year(year)
		, _month(month)
		, _day(day)
	{
		if (!IsInvalid()) // this->IsInvalid(this) 
		{
			assert(false);
			//cout << "非法日期" << endl;	exit(-1); 
		}
	}

	Date(const Date& d)
	{
		_year = d._year;
		_month = d._month;
		_day = d._day;
	}
	Date& operator=(const Date& d)
	{
		if (*this != d)
		{
			_year = d._year;
			_month = d._month;
			_day = d._day;
		}
		return *this;
	}
	~Date()
	{

	}
	bool IsInvalid()
	{
		if (_month > 0 && _month < 13)
		{
			if (_day>0 && _day <= GetMonthDay(_year, _month))
				return true;
		}
		return false;
	}
	bool IsLeapYear(int year)
	{
		if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
		{
			return true;
		}
		return false;

	}
	int GetMonthDay(int year, int month)
	{
		/*assert(month > 0 && month < 13);*/
		static int monthdays[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
		int day = monthdays[month];
		if (month == 2 && IsLeapYear(year))
		{
			day += 1;
		}
		return day;
	}
	void Show()
	{
		cout << _year << "-" << _month << "-" << _day << endl;
	}
	bool operator==(const Date& d)
	{
		return _year == d._year
			&&_month == d._month
			&&_day == d._day;
	}
	bool operator!=(const Date& d)
	{
		return !(*this == d);
	}
	bool operator>=(const Date& d)
	{
		return !(*this < d);
	}
		
	bool operator<=(const Date& d)
	{
		return (*this<d) || (*this == d);
	}
	bool operator>(const Date& d)
	{
		return !(*this <= d);
	}		
	// d1 < d2 
	bool operator<(const Date& d)
	{
		if ((_year < d._year)
			|| (_year == d._year&&_month < d._month)
			|| (_year == d._year&&_month == d._month&&_day < d._day)
			)
		{
			return true;
		}
		return false;
	}
	// d1 + 10 
	Date operator+(int day)
	{
		Date ret(*this);
		ret._day += day;
		while (ret._day > GetMonthDay(ret._year, ret._month))
		{
			ret._day -= GetMonthDay(ret._year, ret._month);
			ret._month++;
			if (ret._month == 13)
			{
				ret._month = 1;
				++ret._year;
			}
		}
		return ret;
	}
	Date& operator+=(int day)
	{
		*this = *this + day;
		return *this;
	}
	
	Date operator-(int day)
	{
		Date ret(*this);
		ret._day -= day;
		if (ret._day <= 0)
		{
			ret._month--;
			if (ret._month == 0)
			{
				ret._month = 12;
				ret._year--;
			}
			ret._day += GetMonthDay(ret._year, ret._month);
		}
		return ret;
	}
	Date& operator-=(int day)
	{
		*this = *this - day;
		return *this;
	}
	int operator-(const Date& d)
	{

	}

	//++d1 
	Date& operator++() // 前置 
	{
		*this = *this + 1;
		return *this;
	}
	//d1++ 
	Date operator++(int) // 后置 
	{
		Date ret(*this);
		*this = *this + 1;
		return ret;
	}
	Date operator--()
	{
		*this = *this - 1;
		return *this;
	}
	Date operator--(int)
	{
		Date ret(*this);
		*this = *this - 1;
		return ret;
	}
private:
	int _year;
	int _month;
	int _day;
};

int main()
{
	Date d1(2018, 3, 26);
	d1.Show(); 

	Date d2(2017, 8, 3);
	//d2.Show(); 
	cout << (d1 == d2) << endl;
	//++d1; // d1.operator++(&d1); 
	//d1++; // d1.operator++(&d1, 0); 
	cout << (d1 < d2) << endl;
	(d1 + 100).Show();
	d1.Show();
	d1 += 100;
	d1.Show();
	(d1++).Show();
	d1.Show();
	(++d1).Show();
	d1.Show();
	(d1--).Show();
	d1.Show();
	(--d1).Show();
	d1.Show();
	return 0;
}
